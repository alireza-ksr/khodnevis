{
	"info": {
		"_postman_id": "4bb4b9ac-2788-47e0-918d-d0c92ab3a7cf",
		"name": "Rent-Residential-Owner-Customer Copy",
		"description": "سناریو تست :  \nصادر شدن کد رهگیری موفق - ایجاد قرارداد اجاره مسکونی توسط موجر حقیقی-مستاجر حقیقی - شاهدین حقیقی\n\nمنظور از owner ، موجر و customer ، مستاجر است.\n\n``` json\n\"property_doc_type_id\" = {14 , 15 , 16}    \n\"property_doc_type_id\" =14 //تک برگ\n\"property_doc_type_id\" = 15 //عادی\n\"property_doc_type_id\" = 16 //دفترچه ای\n\n ```\n\n```\ncontract_status :\n۱: ساخت قرارداد\n۲: اضافه شدن تمامی طرفین\n۳: تکمیل شدن تمامی طرفین\n۴: موجر امضا\n۵: مستاجر امضا\n۶: همه امضا\n۱۰: شاهد اضافه شده\n۱۱: شاهد امضا\n۱۲: کد رهگیری صادر شده\n۱۳: فسخ \n۱۴: آرشیو\n\n ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13924255",
		"_collection_link": "https://gold-escape-737985.postman.co/workspace/Automation-Test-khodnevis~f45ebd82-c265-43c1-9476-0fde1374df74/collection/13924255-4bb4b9ac-2788-47e0-918d-d0c92ab3a7cf?action=share&source=collection_link&creator=13924255"
	},
	"item": [
		{
			"name": "Positive Test Scenarios",
			"item": [
				{
					"name": "Owner -Positive Test Scenarios",
					"item": [
						{
							"name": "Owner",
							"item": [
								{
									"name": "[Setup][1]Get Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// بررسی کد وضعیت\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// بررسی وجود کلیدهای خاص در پاسخ\r",
													"pm.test(\"Response should contain required fields\", function () {\r",
													"    let jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData).to.have.property('username');\r",
													"    pm.expect(jsonData).to.have.property('first_name');\r",
													"    pm.expect(jsonData).to.have.property('last_name');\r",
													"    pm.expect(jsonData).to.have.property('birth_date');\r",
													"    pm.expect(jsonData).to.have.property('sex');\r",
													"    pm.expect(jsonData).to.have.property('national_code');\r",
													"    pm.expect(jsonData).to.have.property('address');\r",
													"    pm.expect(jsonData).to.have.property('address_province');\r",
													"    pm.expect(jsonData).to.have.property('address_county');\r",
													"});\r",
													"\r",
													"// بررسی مقادیر خاص\r",
													"pm.test(\"Username should be valid\", function () {\r",
													"    let jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.username).to.match(/^\\+98\\d{10}$/); // بررسی فرمت شماره تلفن\r",
													"});\r",
													"\r",
													"pm.test(\"Birth date should be in YYYY-MM-DD format\", function () {\r",
													"    let jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.birth_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/); // بررسی فرمت تاریخ\r",
													"});\r",
													"\r",
													"// تنظیم توکن در صورت موفقیت پاسخ\r",
													"if (pm.response.code == 200) {\r",
													"    let requestData = pm.request.headers.get(\"authorization\");\r",
													"    if (requestData) {\r",
													"        let authorization = requestData.split(\" \");\r",
													"        if (authorization.length === 2) {\r",
													"            let token = authorization[1];\r",
													"            pm.collectionVariables.set('token', token); // یا pm.environment.set('token', token);\r",
													"        } else {\r",
													"            console.log(\"Invalid authorization header format\");\r",
													"        }\r",
													"    } else {\r",
													"        console.log(\"Authorization header not found\");\r",
													"    }\r",
													"}\r",
													"\r",
													"//======old ====\r",
													"// if(pm.response.code==200){\r",
													"// let requestData = pm.request.headers.get(\"authorization\")\r",
													"// let authorization = requestData.split(\" \")\r",
													"// let token = authorization[1]\r",
													"// pm.collectionVariables.set('token',token)\r",
													"// }\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// ارسال درخواست به API برای دریافت توکن\r",
													"pm.sendRequest({\r",
													"    url: \"https://new.srem.ir/auth/sso/login/gov/10\",\r",
													"    method: \"GET\",\r",
													"}, function (err, res) {\r",
													"    // بررسی وجود خطا در ارسال درخواست\r",
													"    if (err) {\r",
													"        console.error(\"Request failed with code:\", err);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    // ذخیره نتیجه JSON در متغیر\r",
													"    let jsonResponse;\r",
													"    try {\r",
													"        jsonResponse = res.json();\r",
													"    } catch (e) {\r",
													"        console.error(\"Failed to parse response JSON:\", e);\r",
													"        return;\r",
													"    }\r",
													"\r",
													"    // // بررسی کد وضعیت پاسخ\r",
													"    // if (res.status !== 200) {\r",
													"    //     console.error(\"Response status code is not 200:\", res.status);\r",
													"    //     return;\r",
													"    // }\r",
													"\r",
													"    // بررسی وجود کلیدها در پاسخ\r",
													"    if (jsonResponse && jsonResponse.token && jsonResponse.token.token) {\r",
													"        let tokenOwner = jsonResponse.token.token;\r",
													"        console.log(\"Token received:\", tokenOwner);\r",
													"        pm.collectionVariables.set('tokenOwner', tokenOwner);\r",
													"    } else {\r",
													"        console.error(\"Token not found in response\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenOwner}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 6beb343cf78bff554dfbaa747eb93baf9a58ffca1b17030f32f38deb37f21c5248760e68f9b1eae382c16ac452c63e8675edaedd1438488233bcffb099ffe7b3"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E93FFC0FBF750CBB5F2EBA6F8; _dd_s=logs=1&id=47d517a6-3de4-47e7-b5f3-c3d5ee6538e1&created=1719835051616&expire=1719835957310"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/profile"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me/complete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me",
												"complete"
											]
										},
										"description": "### Get Complete User Information\n\nThis endpoint retrieves complete information about the currently authenticated user.\n\n#### Request\n\nNo request body is required for this request.\n\n- Endpoint: `{{baseUrl}}/api/users/me/complete`\n    \n- Method: `GET`\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"id\": \"\",\n  \"username\": \"\",\n  \"first_name\": \"\",\n  \"last_name\": \"\",\n  \"father_name\": \"\",\n  \"birth_date\": \"\",\n  \"sex\": \"\",\n  \"national_code\": \"\",\n  \"goftino_id\": null,\n  \"is_adviser\": true,\n  \"address_postal_code\": \"\",\n  \"marriage\": \"\",\n  \"address\": \"\",\n  \"address_province\": \"\",\n  \"address_county\": \"\"\n}\n\n ```\n\nThe response contains complete user information including their ID, username, name, birth date, sex, national code, adviser status, address details, and more."
									},
									"response": []
								},
								{
									"name": "[2]Create Contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the response and request body\r",
													"let response = pm.response.json();\r",
													"let requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
													"let contractId = response.id;\r",
													"let type_of_base_property = response.type_of_base_property;\r",
													"let type_of_base_propertyRqs = requestBody.type_of_base_property;\r",
													"\r",
													"// Test Content-Type header\r",
													"pm.test(\"Content-Type header is application/json\", () => {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"});\r",
													"\r",
													"// Validate type_of_base_property in the request\r",
													"const isValidProperty = (value) => Number.isInteger(value) && value >= 0 && value < 14;\r",
													"\r",
													"if (!isValidProperty(Number(type_of_base_propertyRqs))) {\r",
													"    pm.test(\"Status code is 400\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"    });\r",
													"\r",
													"    pm.test(`Invalid value for type_of_base_property`, () => {\r",
													"        const expectedObject = {\r",
													"            \"type_of_base_property\": [\r",
													"                `\"${type_of_base_propertyRqs}\" is not a valid choice.`\r",
													"            ]\r",
													"        };\r",
													"\r",
													"        pm.expect(response).to.deep.include(expectedObject);\r",
													"    });\r",
													"} else {\r",
													"    // Test for successful response\r",
													"    pm.test(\"Status code is 201\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"\r",
													"    pm.test('Response has valid contracts', () => {\r",
													"        pm.expect(response).to.be.an('object');\r",
													"        pm.expect(response).to.have.all.keys('id', 'is_contract_for_sale', 'type_of_base_property');\r",
													"        pm.expect(response.id).to.be.a('string');\r",
													"        pm.expect(response.is_contract_for_sale).to.be.a('boolean');\r",
													"        pm.expect(response.type_of_base_property).to.be.a('string');\r",
													"        pm.expect(response.is_contract_for_sale).to.be.false;\r",
													"\r",
													"        // Set collection variables\r",
													"        pm.collectionVariables.set('contractId', contractId);\r",
													"        pm.collectionVariables.set('type_of_base_property', type_of_base_property);\r",
													"    });\r",
													"}\r",
													"\r",
													"// Additional check to ensure type_of_base_property in response is within valid range\r",
													"pm.test('Type of base property is within valid range', () => {\r",
													"    pm.expect(Number(type_of_base_property)).to.be.at.least(0).and.to.be.below(14);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ======old ===\r",
													"// set variable id in collection\r",
													"// let response = pm.response.json();\r",
													"// let requestBody = JSON.parse(pm.request.body.raw)\r",
													"// let contractId=response.id\r",
													"// let type_of_base_property = response.type_of_base_property\r",
													"// let type_of_base_propertyRqs = requestBody.type_of_base_property\r",
													"\r",
													"// // header content type\r",
													"// pm.test(\"Content-Type header is application/json\", () => {\r",
													"//   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"// });\r",
													"\r",
													"\r",
													"// if(type_of_base_propertyRqs <0 || type_of_base_propertyRqs >= 14){\r",
													"// pm.test('invalid value for {type_of_base_property}' , () => {\r",
													"//     const expectedObject = {\r",
													"//     \"type_of_base_property\": [\r",
													"//        `\\\"${type_of_base_propertyRqs}\\\" is not a valid choice.`\r",
													"//     ]\r",
													"// }\r",
													"\r",
													"//     pm.response.to.have.status(400);\r",
													"//     pm.test(\"Status code is 400\", function () {\r",
													"//     pm.response.to.have.status(400);\r",
													"// });\r",
													"//     pm.expect(response).to.deep.include(expectedObject);\r",
													"// })}\r",
													"//    else if(Number.isInteger(Number(type_of_base_propertyRqs))){\r",
													"\r",
													"//     if(type_of_base_propertyRqs >0 || type_of_base_propertyRqs < 14){\r",
													"//         // status code 200\r",
													"// pm.test(\"Status code is 201\", function () {\r",
													"//     pm.response.to.have.status(201);\r",
													"// });\r",
													"// pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"//     pm.expect(response).to.be.an('object');\r",
													"//     pm.expect(response).to.haveOwnProperty('id');\r",
													"//     pm.expect(response).to.haveOwnProperty('is_contract_for_sale');\r",
													"//     pm.expect(response).to.haveOwnProperty('type_of_base_property');\r",
													"//     pm.expect(response.id).to.be.an('string');\r",
													"//     pm.expect(response.is_contract_for_sale).to.be.an('boolean');\r",
													"//     pm.expect(response.type_of_base_property).to.be.an('string');\r",
													"//     pm.expect(response.is_contract_for_sale).to.be.false;\r",
													"\r",
													"//     pm.collectionVariables.set('contractId', contractId);\r",
													"//     pm.collectionVariables.set('type_of_base_property',type_of_base_property)\r",
													"// })\r",
													"\r",
													"// }}\r",
													"// else{\r",
													"\r",
													"//     pm.test(\"Status code is 400\", function () {\r",
													"//         pm.response.to.have.status(400);\r",
													"//     });\r",
													"\r",
													"//     pm.test(`invalid value for ${type_of_base_property}` , () => {\r",
													"//     const expectedObject = {\r",
													"//     \"type_of_base_property\": [\r",
													"//        `\\\"${type_of_base_propertyRqs}\\\" is not a valid choice.`\r",
													"//     ]\r",
													"// }\r",
													"\r",
													"//         pm.expect(response).to.deep.include(expectedObject);\r",
													"\r",
													"//     })\r",
													"// }\r",
													"    \r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let requestBody = JSON.parse(pm.request.body.raw)\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/submitContract/owner/2cc04563-2f07-434f-b007-f9a3c69cdc32"
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type_of_base_property\": \"0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/rent/owner/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"rent",
												"owner",
												""
											]
										},
										"description": "ملک غیر مسکونی بین 1 تا 12 است.\n\n``` json\n{\n  \"type_of_base_property\": \"1\"//تجاری\n   \"type_of_base_property\": \"2\"//تجاری\n   \"type_of_base_property\": \"3\"//صنعتی\n   \"type_of_base_property\": \"4\"//زمسن زراعی\n   \"type_of_base_property\": \"5\"//خدماتی\n    \"type_of_base_property\": \"6\"//گلخانه ای\n    \"type_of_base_property\": \"7\"//دامداری\n    \"type_of_base_property\": \"8\"//آموزشی\n    \"type_of_base_property\": \"9\"//باغ و باغچه\n    \"type_of_base_property\": \"10\"//ورزشی\n    \"type_of_base_property\": \"11\"//مرغداری\n    \"type_of_base_property\": \"12\"// گلخانه ای\n\n\n ```"
									},
									"response": []
								},
								{
									"name": "[3]Select Type  Melk",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// set variable id in collection\r",
													"let response = pm.response.json();\r",
													"let propertyId = response[0].id;\r",
													"\r",
													"//status code 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check values of response body\", function () {\r",
													"    pm.expect(response[0].is_resident).to.eql(false);\r",
													"    pm.expect(response[0].is_residential).to.eql(false);\r",
													"    pm.expect(response[0].property_doc_type_id).to.eql(\"14\");\r",
													"});\r",
													"\r",
													"pm.test('Response has valid contracts', () =>{\r",
													"    pm.expect(response).to.be.an('array');\r",
													"    if(response[0].contract !== null){\r",
													"        pm.expect(response[0].contract.toLowerCase()).to.not.equal('self-declaration');\r",
													"    }\r",
													"    \r",
													"     pm.expect(response[0]).to.haveOwnProperty('id');\r",
													"     pm.expect(response[0]).to.haveOwnProperty('address');\r",
													"     pm.expect(response[0]).to.haveOwnProperty('postal_code');\r",
													"     pm.expect(response[0]).to.haveOwnProperty('is_resident');\r",
													"     pm.expect(response[0]).to.haveOwnProperty('is_residential');\r",
													"     pm.expect(response[0]).to.haveOwnProperty('contract');\r",
													"     pm.expect(response[0].id).to.be.a('string');\r",
													"     pm.expect(response[0].address).to.be.a('string');\r",
													"     pm.expect(response[0].is_residential).to.be.a('boolean');\r",
													"});\r",
													"pm.collectionVariables.set('propertyId', propertyId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"  pm.sendRequest({\r",
													"     url : \"https://khodnevis.mrud.ir/api/properties/non-residential/\",\r",
													"     method : 'POST',\r",
													"     header : {\r",
													"        'content':'application/json'\r",
													"     },\r",
													"     body:{\r",
													"        mode:'raw',\r",
													"        raw:JSON.stringify({\r",
													"             \"complete_property\": {\r",
													"        \"base_property_usage_type\": 1,\r",
													"        \"base_property_type\": 3,\r",
													"        \"main_information\": {\r",
													"            \"common_areas\": [\r",
													"                \"پشت بام\"\r",
													"            ],\r",
													"            \"building_density\": \"45\",\r",
													"            \"roadAccess\": 1,\r",
													"            \"construction_permit\": 0\r",
													"        },\r",
													"        \"facilities\": [\r",
													"            \"0\",\r",
													"            \"6\"\r",
													"        ],\r",
													"        \"area\": \"120\"\r",
													"    },\r",
													" \"base_property\": {\r",
													"        \"property_doc_type_id\": 15,\r",
													"        \"from_date\": \"2020-05-21\",\r",
													"        \"area\": \"120\",\r",
													"        \"state\": \"تهران\",\r",
													"        \"city\": \"تهران\",\r",
													"        \"postal_code\": \"9999999999\",\r",
													"        \"address\": \"مسکن تجاری\"\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"        }\r",
													"        )}\r",
													"        \r",
													"\r",
													"     \r",
													"}), function (err, response) {\r",
													"    console.log(response.json());\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/submitContract/owner/3278186a-5c95-4127-9ece-6a1b3ef44324"
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/amlak/properties/?type_of_base_property=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"amlak",
												"properties",
												""
											],
											"query": [
												{
													"key": "type_of_base_property",
													"value": "0",
													"description": "0-12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[4]User information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"let national_code_Owner = responseData.national_code\r",
													"pm.collectionVariables.set(\"national_code_Owner\",national_code_Owner)\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.be.oneOf([201,200]);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test data type of the response\", () => {\r",
													"  pm.expect(responseData).to.be.an(\"object\");\r",
													"  pm.expect(responseData.id).to.be.a(\"string\");\r",
													"  pm.expect(responseData.username).to.be.a(\"string\");\r",
													"  pm.expect(responseData.first_name).to.be.a(\"string\");\r",
													"  pm.expect(responseData.birth_date).to.be.a(\"string\");\r",
													"  pm.expect(responseData.sex).to.be.a(\"string\");\r",
													"  pm.expect(responseData.national_code).to.be.a(\"string\");\r",
													"  pm.expect(responseData.is_adviser).to.be.an(\"boolean\");\r",
													"  pm.expect(responseData.address_postal_code).to.be.a(\"string\");\r",
													"  pm.expect(responseData.marriage).to.be.a(\"string\");\r",
													"  pm.expect(responseData.address).to.be.a(\"string\");\r",
													"  pm.expect(responseData.address_province).to.be.a(\"string\");\r",
													"  pm.expect(responseData.address_county).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Testing the values ​​of user information fields\", () => {\r",
													"   \r",
													"  pm.expect(responseData.username).to.eql(\"+989030000010\");\r",
													"  pm.expect(responseData.first_name).to.eql(\"نجفقلي\");\r",
													"  pm.expect(responseData.last_name).to.eql(\"پورسليمان دشتكي\");\r",
													"  pm.expect(responseData.father_name).to.eql(\"كنار\");\r",
													"  pm.expect(responseData.birth_date).to.eql(\"1974-06-24\");\r",
													"  pm.expect(responseData.sex).to.eql(\"M\");\r",
													"  pm.expect(responseData.national_code).to.eql(\"4689121672\");\r",
													"  pm.expect(responseData.is_adviser).to.eql(false );\r",
													"  pm.expect(responseData.address_postal_code).to.eql(\"8815934769\");\r",
													"  pm.expect(responseData.marriage).to.eql(\"M\");\r",
													"  pm.expect(responseData.address_province).to.eql(\"چهارمحال وبختیاری\");\r",
													"  pm.expect(responseData.address_county).to.eql(\"شهر کرد\");\r",
													"});\r",
													"\r",
													" pm.test(\"size of object\", () => {\r",
													" pm.expect(Object.entries(pm.response).length).to.have.eql(9)\r",
													"  \r",
													" });\r",
													"\r",
													" \r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en,fa-IR;q=0.9,fa;q=0.8,en-US;q=0.7"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e",
												"disabled": true
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EEDFFB2063630601A5A0914C3; _dd_s=logs=1&id=68f8340d-4bb6-4363-8e7a-58362cd0f3b7&created=1716618919362&expire=1716622932180"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/submitContract/owner/1bcdd227-a571-416f-aa29-79b5c7c93885"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me/complete/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me",
												"complete",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[5] owner Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// let jsonData = pm.response.json();\r",
													"// let requestBody = JSON.parse(pm.request.body.raw)\r",
													"// let shareCount = requestBody.contract_owner[0].share_count\r",
													"// let shareCountBoy = requestBody.contract_owner[0].share_count\r",
													"\r",
													"// if( shareCount<= 6 && shareCount >= 0.1){\r",
													"//         pm.test(\"Response body for value valid\" , () => {\r",
													"//         const expectedObject = {\r",
													"//     \"contract_owner\": [\r",
													"//         {\r",
													"//             \"phone_number\": \"+989030000010\",\r",
													"//             \"national_code\": \"4689121672\",\r",
													"//             \"share_count\": Number(`${shareCountBoy}`)\r",
													"//         }\r",
													"//     ]\r",
													"\r",
													"// }\r",
													"// console.log(expectedObject)\r",
													"//          pm.expect(jsonData).to.deep.include(expectedObject);\r",
													"//     })\r",
													"//     pm.test(\"Status code is 200\", function () {\r",
													"//         pm.response.to.have.status(200);\r",
													"//     });\r",
													"  \r",
													"\r",
													"// }else {\r",
													"\r",
													"//     pm.test(\"Status code is 400\", function () {\r",
													"//         pm.response.to.have.status(400);\r",
													"//     });\r",
													"\r",
													"//     pm.test(\"Response body for value invalid\" , () => {\r",
													"//         const expectedObject = {\r",
													"//     \"contract_owner\": [\r",
													"//         {\r",
													"//             \"share_count\": [\r",
													"//                 \"Share count must be between 0 and 6\"\r",
													"//             ]\r",
													"//         }\r",
													"//     ]\r",
													"// }\r",
													"//          pm.expect(jsonData).to.deep.include(expectedObject);\r",
													"//     })\r",
													"// }\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"let shareCount = parseFloat(requestBody.contract_owner[0].share_count); // تبدیل به عدد اعشاری\r",
													"\r",
													"// بررسی وضعیت share_count\r",
													"if (shareCount >= 0.1 && shareCount <= 6) {\r",
													"    pm.test(\"Response body for valid value\", () => {\r",
													"        // ساخت expectedObject برای مقایسه\r",
													"        const expectedObject = {\r",
													"            \"contract_owner\": [\r",
													"                {\r",
													"                    \"phone_number\": \"+989030000010\",\r",
													"                    \"national_code\": \"4689121672\",\r",
													"                    \"share_count\": shareCount // استفاده از shareCount به صورت عدد\r",
													"                }\r",
													"            ]\r",
													"        };\r",
													"\r",
													"        pm.expect(jsonData).to.deep.include(expectedObject);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"} else {\r",
													"    pm.test(\"Status code is 400\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response body for invalid value\", () => {\r",
													"        const expectedObject = {\r",
													"            \"contract_owner\": [\r",
													"                {\r",
													"                    \"share_count\": [\r",
													"                        \"Share count must be between 0 and 6\"\r",
													"                    ]\r",
													"                }\r",
													"            ]\r",
													"        };\r",
													"\r",
													"        pm.expect(jsonData).to.deep.include(expectedObject);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en,fa-IR;q=0.9,fa;q=0.8,en-US;q=0.7"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EEDFFB2063630601A5A0914C3; _dd_s=logs=1&id=0970268c-6aa1-413f-9f88-70f06f0dc399&created=1716627176570&expire=1716628133427"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/submitContract/owner/d0fc55e7-3b32-48b6-bd9b-88b3c64b3150"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contract_owner\": [\r\n        {\r\n            \"phone_number\": \"+989030000010\",\r\n            \"national_code\": \"4689121672\",\r\n            \"share_count\": \"0.1\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/owners/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"owners",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "https://new.srem.ir/api/properties/",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// // لیست نمونه کدهای پستی\r",
													"// const postalCodes = [\r",
													"//     \"1993684150\",\r",
													"//     \"8791786932\",\r",
													"//     \"8791743311\",\r",
													"//     \"8791663661\",\r",
													"//     \"3414685899\",\r",
													"//     \"3413735164\",\r",
													"//     \"7381975837\"\r",
													"//     // این لیست باید با کدهای واقعی جایگزین شود\r",
													"// ];\r",
													"\r",
													"// // تابع برای انتخاب تصادفی یک کد پستی از لیست\r",
													"// function generatePostalCode(codes) {\r",
													"//     const randomIndex = Math.floor(Math.random() * codes.length);\r",
													"//     return codes[randomIndex];\r",
													"// }\r",
													"\r",
													"// // تولید کد پستی و ذخیره آن در متغیر\r",
													"// const postalCode = generatePostalCode(postalCodes);\r",
													"\r",
													"// // چاپ کد پستی تولید شده در کنسول\r",
													"// console.log(\"کد پستی تولید شده:\", postalCode);\r",
													"\r",
													"// // تنظیم متغیر محیطی در Postman\r",
													"// pm.collectionVariables.set(\"postalCode\", postalCode);\r",
													"\r",
													"\r",
													"// لیست نمونه کدهای پستی\r",
													"const postalCodes = [\r",
													"    \"1993684150\",\r",
													"    \"8791786932\",\r",
													"    \"8791743311\",\r",
													"    \"8791663661\",\r",
													"    \"3414685899\",\r",
													"    \"3413735164\",\r",
													"    \"7381975837\"\r",
													"    // این لیست باید با کدهای واقعی جایگزین شود\r",
													"];\r",
													"\r",
													"// تابع برای انتخاب تصادفی یک کد پستی از لیست\r",
													"function generatePostalCode(codes) {\r",
													"    const randomIndex = Math.floor(Math.random() * codes.length);\r",
													"    return codes[randomIndex];\r",
													"}\r",
													"\r",
													"// تولید کد پستی و ذخیره آن در متغیر\r",
													"const postalCode = generatePostalCode(postalCodes);\r",
													"\r",
													"// چاپ کد پستی تولید شده در کنسول برای اشکال‌زدایی\r",
													"console.log(`کد پستی تولید شده: ${postalCode}`);\r",
													"\r",
													"// تنظیم متغیر محیطی در Postman\r",
													"pm.variables.set(\"postalCode\", postalCode); // استفاده از pm.variables.set برای متغیر محیطی به جای pm.collectionVariables.set\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Accept-Language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "Connection",
												"value": "keep-alive"
											},
											{
												"key": "Cookie",
												"value": "cookiesession1=678B298EFA3F9A451FF2A517618D2654; _dd_s=logs=1&id=34300cec-bc63-48b8-8392-e94660cee316&created=1722425232925&expire=1722426191071"
											},
											{
												"key": "Origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/myProperties/addNonResidential"
											},
											{
												"key": "Sec-Fetch-Dest",
												"value": "empty"
											},
											{
												"key": "Sec-Fetch-Mode",
												"value": "cors"
											},
											{
												"key": "Sec-Fetch-Site",
												"value": "same-origin"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
											},
											{
												"key": "authorization",
												"value": "Bearer 30dd75d9cba3a0c1929165279350fc39b605f309b3cdf0de0c006d44dc21a8f09ff71a98e794042cf38ad9a6246880bfecbef0d7b8738bc2513c244594a619f4"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quota_amount\": \"2\",\r\n    \"property_doc_type_id\": 14,\r\n    \"from_date\": \"2024-07-29\",\r\n    \"property_doc_digital_book_number\": \"236548952123659553\",\r\n    \"property_doc_book_number\": \"\",\r\n    \"secondary_registration_plaque\": \"1123\",\r\n    \"primary_registration_plaque\": \"456\",\r\n    \"registration_area\": \"7891\",\r\n    \"registration_section\": \"89632\",\r\n    \"base_property_usage_type\": 1,\r\n    \"base_property_type\": 3,\r\n    \"area\": \"600\",\r\n    \"main_information\": {\r\n        \"building_density\": \"1\",\r\n        \"roadAccess\": 1,\r\n        \"construction_permit\": 1\r\n    },\r\n    \"postal_code\": \"{{postalCode}}\",\r\n    \"state\": \"تهران\",\r\n    \"city\": \"تهران\",\r\n    \"address\": \"استان تهران - شهرستان تهران - بخش مرکزی - دهستان  - شهر تهران - محله دولاب - کوچه شهید صادق ثقفی - بن بست کثیری -  -  - پلاک 2 - طبقه همکف - واحد  1 \",\r\n    \"bills\": [\r\n        {\r\n            \"bill_identity\": \"9221459104126\",\r\n            \"debt\": 1,\r\n            \"type\": \"1\",\r\n            \"is_amlak\": false,\r\n            \"is_appended\": true\r\n        }\r\n    ],\r\n    \"facilities\": [\r\n        \"7\",\r\n        \"6\",\r\n        \"1\"\r\n    ],\r\n    \"bill_identity_electricity\": \"9221459104126\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://new.srem.ir/api/properties/",
											"protocol": "https",
											"host": [
												"new",
												"srem",
												"ir"
											],
											"path": [
												"api",
												"properties",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[6]Melk Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestData = JSON.parse(pm.request.body.raw)\r",
													"let responseData = pm.response.json()\r",
													"\r",
													"\r",
													"\r",
													"// status code 200\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"       pm.test(\"Response body for value valid\" , () => {\r",
													"        const expectedObject = {\r",
													"\r",
													"            \"address_postal_code\": requestData.address_postal_code,\r",
													"            \"marriage\": requestData.marriage,\r",
													"            \"address\": requestData.address ,\r",
													"            \"address_province\" : requestData.address_province,\r",
													"            \"address_county\" : requestData.address_county\r",
													"        }\r",
													"                 pm.expect(responseData).to.deep.include(expectedObject);\r",
													"\r",
													"       })\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/submitContract/owner/3278186a-5c95-4127-9ece-6a1b3ef44324"
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"afee2857-476f-42b9-ac51-c8445e8e69be\",\r\n    \"username\": \"09030000001\",\r\n    \"first_name\": \"ابوالفضل\",\r\n    \"last_name\": \"فشكي\",\r\n    \"father_name\": \"محمدعلي\",\r\n    \"birth_date\": \"1963-12-05\",\r\n    \"sex\": \"M\",\r\n    \"national_code\": \"5449375591\",\r\n    \"goftino_id\": \"646a5408cab6bb19affe027f3d7c0ea98f4f765b3cb589b6407e328e9db2cd82\",\r\n    \"is_adviser\": true,\r\n    \"address_postal_code\": \"9999999999\",\r\n    \"marriage\": \"M\",\r\n    \"address\": \"تهران - بلوار کشاورز\",\r\n    \"address_province\": \"تهران\",\r\n    \"address_county\": \"تهران\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/owner/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"owner",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[7]Get Property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"\r",
													"let propertiesResIsresidentialId = responseData.id\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// status code 200\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Response body for value valid\" , () => {\r",
													"        const expectedObject = \r",
													"    {\r",
													"    \"id\": \"29c8a2f3-35d4-4fe6-b68f-ea8e74ea359c\",\r",
													"    \"bills\": [\r",
													"        {\r",
													"            \"id\": \"c0ddba9d-4787-461a-a942-5d9735cb0871\",\r",
													"            \"type\": \"1\",\r",
													"            \"bill_identity\": \"5287665602325\",\r",
													"            \"debt\": false,\r",
													"            \"is_amlak\": true,\r",
													"            \"billing_id\": null\r",
													"        }\r",
													"    ],\r",
													"    \"amlak_id\": \"CfDJ8P5kKsiTHRlEoHHVXknzvnD/BDAYKZuaLja/QrFRfYe38oMbmJQWsuOXe5YULMRhh50zlDFZmNayk2B8kDrUPvVXp9Hl\",\r",
													"    \"owner_national_code\": \"4689121672\",\r",
													"    \"postal_code\": \"8815934768\",\r",
													"    \"city\": \"شهر کرد\",\r",
													"    \"state\": \"چهارمحال وبختیاری\",\r",
													"    \"address\": \"بهارستان بلوار 17 شهریور کوچه 29 پلاک 0 طبقه 1 واحد 1\",\r",
													"    \"floor_number\": 1,\r",
													"    \"unit_title\": \"1\",\r",
													"    \"is_self_declaration\": true,\r",
													"    \"is_resident\": false,\r",
													"    \"used_in_contract\": true,\r",
													"    \"bill_identity_electricity\": \"5287665602325\",\r",
													"    \"property_doc_type_id\": \"14\",\r",
													"    \"from_date\": \"2015-10-07\",\r",
													"    \"property_doc_digital_book_number\": null,\r",
													"    \"registration_area\": \"شهرکرد\",\r",
													"    \"registration_section\": \"شهرکرد\",\r",
													"    \"primary_registration_plaque\": \"1573\",\r",
													"    \"secondary_registration_plaque\": \"1577\",\r",
													"    \"jam_code\": \"48715635758733900000000\",\r",
													"    \"property_type_id\": \"1\",\r",
													"    \"area\": 109.0,\r",
													"    \"build_year\": \"1391\",\r",
													"    \"property_doc_book_number\": \"476\",\r",
													"    \"quota_amount\": 6.0,\r",
													"    \"is_old_property\": false,\r",
													"    \"document\": null,\r",
													"    \"base_property_usage_type\": \"0\",\r",
													"    \"base_property_type\": \"1\",\r",
													"    \"main_information\": {\r",
													"        \"gas\": 2,\r",
													"        \"water\": 2,\r",
													"        \"wc_type\": 1,\r",
													"        \"wc_count\": 1,\r",
													"        \"telephone\": 1,\r",
													"        \"unit_side\": 1,\r",
													"        \"electricity\": 1,\r",
													"        \"haveParking\": 1,\r",
													"        \"room_number\": 1,\r",
													"        \"unit_number\": 1,\r",
													"        \"common_areas\": null,\r",
													"        \"haveElevator\": 1,\r",
													"        \"kitchen_type\": 1,\r",
													"        \"building_side\": 0,\r",
													"        \"building_view\": [\r",
													"            0\r",
													"        ],\r",
													"        \"flooring_type\": [\r",
													"            0\r",
													"        ],\r",
													"        \"haveWarehouse\": 1,\r",
													"        \"cooling_system\": [\r",
													"            0\r",
													"        ],\r",
													"        \"heating_system\": [\r",
													"            0\r",
													"        ],\r",
													"        \"unit_per_floor\": \"2\",\r",
													"        \"transaction_area\": \"55\",\r",
													"        \"number_of_parking\": 1,\r",
													"        \"building_floor_count\": 1,\r",
													"        \"object_of_transaction\": 2\r",
													"    },\r",
													"    \"facilities\": [\r",
													"        \"27\",\r",
													"        \"26\"\r",
													"    ],\r",
													"    \"owners\": [],\r",
													"    \"is_residential\": true,\r",
													"    \"type_of_base_property\": \"0\",\r",
													"    \"free_qouta_amount\": -6\r",
													"}\r",
													"  \r",
													"\r",
													"                 pm.expect(responseData).to.deep.include(expectedObject);\r",
													"                 pm.collectionVariables.set(\"propertiesResIsresidentialId\" ,propertiesResIsresidentialId )\r",
													"\r",
													"       })\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/submitContract/owner/3278186a-5c95-4127-9ece-6a1b3ef44324"
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/properties/{{propertyId}}/?type_of_base_property=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"properties",
												"{{propertyId}}",
												""
											],
											"query": [
												{
													"key": "type_of_base_property",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[8]Select baseproperty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"    pm.test(\"Response body for value valid\" , () => {\r",
													"        const expectedObject = \r",
													"        {\r",
													"    \"id\": \"a94955bb-fdaa-4dc0-9f09-dbe1e2c9ac6f\",\r",
													"    \"base_property\": {\r",
													"        \"id\": \"cf6996ec-ab8d-4aa9-87d3-1becca531516\",\r",
													"        \"is_residential\": true,\r",
													"        \"owner_national_code\": \"5449375591\",\r",
													"        \"postal_code\": \"1783664441\",\r",
													"        \"city\": \"تهران\",\r",
													"        \"state\": \"تهران\",\r",
													"        \"address\": \"افسریه خیابان برادران شهیدعلیرضایی (15متری اول) خیابان شهید قاسم تارخ (38) پلاک 233 طبقه 1\",\r",
													"        \"floor_number\": 1,\r",
													"        \"unit_title\": \"1\",\r",
													"        \"is_self_declaration\": true,\r",
													"        \"is_resident\": false,\r",
													"        \"used_in_contract\": true,\r",
													"        \"bill_identity_electricity\": \"9181351004123\",\r",
													"        \"property_doc_type_id\": \"14\",\r",
													"        \"from_date\": \"2023-05-04\",\r",
													"        \"property_doc_digital_book_number\": \"140120301054049501\",\r",
													"        \"registration_area\": \"خاوران تهران\",\r",
													"        \"registration_section\": \"7\",\r",
													"        \"primary_registration_plaque\": \"4476\",\r",
													"        \"secondary_registration_plaque\": \"42435\",\r",
													"        \"jam_code\": \"54452339462453900000000\",\r",
													"        \"property_type_id\": \"1\",\r",
													"        \"area\": 65.5,\r",
													"        \"build_year\": \"1374\",\r",
													"        \"property_doc_book_number\": null,\r",
													"        \"quota_amount\": 6.0,\r",
													"        \"is_old_property\": false,\r",
													"        \"document\": null\r",
													"    },\r",
													"    \"type_of_base_property\": \"0\",\r",
													"    \"date_end\": \"2025-06-23\",\r",
													"    \"customer_phone_number\": \"+989030000002\"\r",
													"}\r",
													"\r",
													"\r",
													"       })"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer b3bdcee054bcfa1a25549afb4ab180b9a4fb403d0aa7c9ce04de62b755f1044b08f23e8a1c80084b5f3927796abf1de0b435bd0a8c4134bce10d7f4d7ec64974"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=5be675e8-673c-42aa-930d-6b13ea76af70&created=1719904138062&expire=1719906903075"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/submitContract/owner/b8c37a03-6bd2-4ef0-875b-4f086d981e5b"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"base_property\": \"{{propertiesResIsresidentialId}}\",\r\n    \"type_of_base_property\": \"0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/baseproperty/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"baseproperty",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[9]Contract Conditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData =pm.response.json()\r",
													"\r",
													"\r",
													"// تلاش برای تبدیل بدنه درخواست به JSON\r",
													"let requestBody;\r",
													"try {\r",
													"    requestBody = JSON.parse(pm.request.body.raw);\r",
													"} catch (e) {\r",
													"    console.log(\"خطا در تجزیه بدنه درخواست:\", e);\r",
													"}\r",
													"\r",
													"// شمارنده تلاش‌ها\r",
													"const MAX_ATTEMPTS = 20; // حداکثر تعداد تلاش‌ها\r",
													"let attemptCount = pm.collectionVariables.get(\"attemptCount\") || 0;\r",
													"\r",
													"if (pm.response.status !== 200) {\r",
													"    console.log('وضعیت پاسخ:', pm.response.status);\r",
													"    console.log('پاسخ:', pm.response.text());\r",
													"\r",
													"    if (attemptCount < MAX_ATTEMPTS) {\r",
													"        attemptCount++;\r",
													"        pm.collectionVariables.set(\"attemptCount\", attemptCount); // ذخیره شمارنده تلاش‌ها\r",
													"\r",
													"        // تنظیم زمان برای ارسال دوباره درخواست (در اینجا 1 ثانیه)\r",
													"        setTimeout(() => {\r",
													"            // تعیین درخواست بعدی در Postman\r",
													"            postman.setNextRequest(\"[9]Contract Conditions\");\r",
													"        }, 1000); // زمان تأخیر به میلی‌ثانیه (در اینجا 1 ثانیه)\r",
													"    } else {\r",
													"        console.log(\"تعداد تلاش‌ها به حداکثر رسید. توقف تلاش‌ها.\");\r",
													"        pm.collectionVariables.unset(\"attemptCount\"); // بازنشانی شمارنده تلاش‌ها\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"پاسخ موفقیت‌آمیز دریافت شد.\");\r",
													"    pm.collectionVariables.unset(\"attemptCount\"); // بازنشانی شمارنده تلاش‌ها در صورت موفقیت\r",
													"}\r",
													"\r",
													"\r",
													"//=============\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"    pm.test(\"Response body for value valid\" , () => {\r",
													"        const expectedObject = \r",
													"        {\r",
													"    \"payments\": [\r",
													"        {\r",
													"            \"rent_increase_percentage\": 0.0,\r",
													"            \"rent_amount\": 5000000.0,\r",
													"            \"mortgage_increase_percentage\": 0.0,\r",
													"            \"mortgage_or_sell_amount\": 10000000000.0,\r",
													"            \"payment_levels\": [\r",
													"                {\r",
													"                    \"payment_amount\": 6000000000.0,\r",
													"                    \"payment_method\": 2,\r",
													"                    \"payment_date\": \"2024-06-21\"\r",
													"                },\r",
													"                {\r",
													"                    \"payment_amount\": 4000000000.0,\r",
													"                    \"payment_method\": 2,\r",
													"                    \"payment_date\": \"2024-07-21\"\r",
													"                }\r",
													"            ]\r",
													"        }\r",
													"    ],\r",
													"    \"date_end\": \"2025-03-21\",\r",
													"    \"date_give\": \"2024-06-23\",\r",
													"    \"date_start\": \"2024-06-22\",\r",
													"    \"registration_date\": \"2024-06-21\",\r",
													"    \"customer_phone_number\": null,\r",
													"    \"last_base_property_date_end\": null,//\"2039-05-16\"\r",
													"}\r",
													"\r",
													"                 pm.expect(responseData).to.deep.include(expectedObject);\r",
													"\r",
													"       })"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let requestBody = JSON.parse(pm.request.body.raw)\r",
													"\r",
													"//=========================================================\r",
													"// let date_start = requestBody.date_start\r",
													"// let date_end = requestBody.date_end\r",
													"\r",
													"// console.log(date_start , date_end)\r",
													"\r",
													"// // تاریخ‌های ورودی\r",
													"// const dateStart = new Date(\"2024-07-30\");\r",
													"// const dateEnd = new Date(\"2024-08-22\");\r",
													"\r",
													"// // محاسبه تفاوت زمانی بین دو تاریخ به میلی‌ثانیه\r",
													"// const differenceInMilliseconds = dateEnd - dateStart;\r",
													"\r",
													"// // تبدیل میلی‌ثانیه‌ها به روز\r",
													"// const millisecondsInOneDay = 1000 * 60 * 60 * 24;\r",
													"// const differenceInDays = Math.round(differenceInMilliseconds / millisecondsInOneDay);\r",
													"\r",
													"// // ذخیره مقدار به عنوان متغیر محیطی یا جهانی\r",
													"// pm.environment.set(\"differenceInDays\", differenceInDays);\r",
													"\r",
													"\r",
													" //====================================\r",
													"\r",
													"\r",
													" // تابع برای تولید تاریخ تصادفی در بازه مشخص\r",
													"function getRandomDate(start, end) {\r",
													"    const startDate = new Date(start);\r",
													"    const endDate = new Date(end);\r",
													"    const randomTimestamp = Math.floor(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));\r",
													"    return new Date(randomTimestamp).toISOString().split('T')[0]; // فرمت YYYY-MM-DD\r",
													"}\r",
													"\r",
													"// تولید تاریخ‌های تصادفی\r",
													"const randomDateStart = getRandomDate(\"2030-01-01\", \"2040-07-01\");\r",
													"const randomDateEnd = getRandomDate(randomDateStart, \"2045-12-31\");\r",
													"\r",
													"// ذخیره تاریخ‌های تصادفی به عنوان متغیر محیطی\r",
													"pm.collectionVariables.set(\"dateStart\", randomDateStart);\r",
													"pm.collectionVariables.set(\"dateEnd\", randomDateEnd);\r",
													"\r",
													"console.log(`تاریخ شروع تصادفی: ${randomDateStart}`);\r",
													"console.log(`تاریخ پایان تصادفی: ${randomDateEnd}`);\r",
													"\r",
													"const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\r",
													"pm.collectionVariables.set(\"registration_date\", currentDate);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer b3bdcee054bcfa1a25549afb4ab180b9a4fb403d0aa7c9ce04de62b755f1044b08f23e8a1c80084b5f3927796abf1de0b435bd0a8c4134bce10d7f4d7ec64974"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=5be675e8-673c-42aa-930d-6b13ea76af70&created=1719904138062&expire=1719905183983"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/submitContract/owner/50dea2df-180c-4938-a394-1d24acb72022"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payments\": [\r\n        {\r\n            \"rent_increase_percentage\": 0,\r\n            \"mortgage_increase_percentage\": 0,\r\n            \"mortgage_or_sell_amount\": 10000000000,\r\n            \"rent_amount\": 5000000,\r\n            \"payment_levels\": [\r\n                {\r\n                    \"payment_amount\": 6000000000,\r\n                    \"payment_method\": 2,\r\n                    \"payment_date\": \"2024-06-21\"\r\n                },\r\n                {\r\n                    \"payment_amount\": 4000000000,\r\n                    \"payment_method\": 2,\r\n                    \"payment_date\": \"2024-07-21\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"registration_date\": \"{{registration_date}}\",\r\n    \"date_start\": \"{{dateStart}}\",\r\n    \"date_end\": \"{{dateEnd}}\",\r\n    \"date_give\": \"{{registration_date}}\",\r\n    \"date_duration\": \"{{differenceInDays}} روز\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[10]Contract Clauses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// status code 200\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/submitContract/owner/3278186a-5c95-4127-9ece-6a1b3ef44324"
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"clause\": {\r\n        \"text_clauses\": [\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 3,\r\n                \"order\": 2,\r\n                \"text\": \"کلیه خیارات از جمله خیار غبن به استثناء خیار تدلیس و خیار تخلف از شرط به شرح مقرر در این قرارداد با اقرار طرفین اسقاط گردید. (این بند به معنای آن است که پس از الزامی شدن قرارداد، صرفا با رعایت مفاد این قرارداد، طرفین حق فسخ دارند.)\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 3,\r\n                \"order\": 3,\r\n                \"text\": \"پرداخت هزینه تعمیرات و هزینه‌های کلی از قبیل نصب و راه‌اندازی به منظور بهره‌برداری از دستگاه تهویه، شوفاژ، کولر، آسانسور و شبکه برق، آب و گاز بر عهده مالک است و هزینه‌های جزئی مربوط به استفاده از مورد اجاره و انجام تعمیرات جزئی به عهده مستأجر است و نوع هزینه‌ها و میزان آن را عرف تعیین می‌کند.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 4,\r\n                \"order\": 4,\r\n                \"text\": \"مستأجر حق استفاده از مورد اجاره را به نحو مباشرت ندارد (حق انتقال به غیر را ندارد) و در صورت تخلف مؤجر حق فسخ قرارداد را دارد.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 4,\r\n                \"order\": 5,\r\n                \"text\": \"پرداخت هزینه‌های مصرفی آب، برق، گاز، تلفن، شارژ، هزینه‌های نگهداری ساختمان، فاضلاب شهری، و غیره بر عهده مستأجر است و باید در موعد تخلیه، فسخ یا اقاله قبوض پرداختی را به مؤجر ارائه نماید.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 4,\r\n                \"order\": 6,\r\n                \"text\": \"مستأجر مکلف است در زمان تخلیه، مورد اجاره را به همان وضعی که تحویل گرفته به مؤجر تحویل داده و رسید دریافت نماید و در صورت حدوث خسارت نسبت به مورد اجاره، مستأجر متعهد به جبران خسارات وارده بوده و تهاتر مبلغ خسارات با مبلغ قرض‌الحسنه توسط مؤجر بلااشکال است.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 6,\r\n                \"order\": 2,\r\n                \"text\": \"این وجه متعلق به مؤجر است و در قبال پرداخت آن با اجاره دادن ملک به مستأجر با شرایط و مبلغ مندرج در اجاره نامه مغازه موافقت کرده است و برای این سرقفلی هیچ ما بازاء و عوض دیگری در نظر گرفته نشده و در انقضاء مدت مستأجر مکلف به تخلیه است و چیزی بابت سرقفلی یا عوض آن دریافت نخواهد کرد.\",\r\n                \"is_active\": false,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 6,\r\n                \"order\": 3,\r\n                \"text\": \"در پایان مدت و زمان تخلیه معادل همین مبلغ به مستأجر پرداخت خواهد شد. افزایش نرخ تورم و تغییر قیمت سرقفلی تأثیری در این امر نخواهد داشت.\",\r\n                \"is_active\": false,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 6,\r\n                \"order\": 4,\r\n                \"text\": \"در پایان مدت رقم پرداختی مستأجر به علاوه مبلغی که بر مبنای شاخص بانک مرکزی جبران کاهش ارزش پول را با توجه به مدت اجاره بکند به مستأجر تأدیه خواهد شد.\",\r\n                \"is_active\": false,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 6,\r\n                \"order\": 5,\r\n                \"text\": \"پس از پایان دوره سرقفلی در قرارداد تجاری، تعهد به تسویه نهایی بر اساس اصول عدالت صورت خواهد گرفت. مبنای تعیین مبلغ تسویه و نرخ اعمالی برای این تسویه، بر پایه نرخ‌های بازار و مبالغ معاملاتی واقعی در زمان تخلیه ملک به مستأجر قرار می‌گیرد. این اقدام تضمین می‌کند که مستأجر معادله‌ای عادلانه و دقیق برای پرداخت نهایی خود دریافت کند، که به تبع آن از تغییرات بازار و قیمت‌ها در طول دوره سرقفلی بهره‌برداری نماید.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 7,\r\n                \"order\": 3,\r\n                \"text\": \"مشاور املاک مسئولیت دارد که مستندات و اسناد مربوط به معاملات مرتبط را به دقت تهیه و ثبت نماید و همچنین آنها را به مؤجر و مستأجر ارائه کند.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 7,\r\n                \"order\": 4,\r\n                \"text\": \"مشاور املاک متعهد است که از اطلاعات مربوط به اجاره ملک مورد نظر، و شرایط مالی مستأجر به صورت محرمانه و بدون اشتراک آن با شخص یا اشخاص ثالثی بهره‌برداری نخواهد کرد.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            },\r\n            {\r\n                \"id\": null,\r\n                \"paragraph_number\": 7,\r\n                \"order\": 5,\r\n                \"text\": \"مشاور املاک تعهد دارد که در صورتی که در هنگام اجرای این قرارداد به هرگونه مشکلی برخورد کند یا تضادی به وجود آید، به‌عنوان میانجی میان مؤجر و مستأجر عمل نماید و تلاش کند تا مسئله به نحوی صلح‌آمیز حل گردد.\",\r\n                \"is_active\": true,\r\n                \"is_appended\": false\r\n            }\r\n        ],\r\n        \"penalty_for_late_property\": 666000,\r\n        \"property_usage\": 2,\r\n        \"type_of_usage\": \"تست\",\r\n        \"property_numbers\": null,\r\n        \"penalty_for_late_payment_by_customer\": 58922,\r\n        \"day_of_month_payment\": \"25\",\r\n        \"card_number\": \"4444333322221111\",\r\n        \"sheba\": \"213258746985236699524698\",\r\n        \"penalty_for_late_payment_by_owner\": 90000,\r\n        \"commercial_clause\": {\r\n            \"goodwill\": \"true\",\r\n            \"goodwill_amount\": 59800\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/clauses/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"clauses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[11]Add Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body(\"{}\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer b3bdcee054bcfa1a25549afb4ab180b9a4fb403d0aa7c9ce04de62b755f1044b08f23e8a1c80084b5f3927796abf1de0b435bd0a8c4134bce10d7f4d7ec64974"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=5be675e8-673c-42aa-930d-6b13ea76af70&created=1719904138062&expire=1719906609726"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/submitContract/owner/50dea2df-180c-4938-a394-1d24acb72022"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone_number\": \"+989030000001\",\r\n    \"national_code\": \"5449375591\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/owner/customer/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"owner",
												"customer",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[12] Contract Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// status code 200\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"checked response body\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.contract_role).to.eql(\"owner\");\r",
													"    pm.expect(jsonData.contract_status).to.eql(2);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "sec-ch-ua",
												"value": "\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\""
											},
											{
												"key": "Referer",
												"value": "https://new.srem.ir/contract/3278186a-5c95-4127-9ece-6a1b3ef44324"
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "authorization",
												"value": "Bearer e2073892b4621911b37cbe0283fc91135c907846193528b3468872da9d1a653d63b16cc8bc8466ade692af549cc8edc182a704260190f0296c4dff6be8690d7e"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/full/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"full",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[13] Download Contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Removed response.json() call since the response is not JSON\r",
													"// status code 200\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required Content-Type header with value 'application/pdf'\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/pdf\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en,fa-IR;q=0.9,fa;q=0.8,en-US;q=0.7"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EEDFFB2063630601A5A0914C3; _dd_s=logs=1&id=3405736d-8f01-44b3-811f-e1f87847dac5&created=1716720537247&expire=1716723596360"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/1c67c63e-c9b3-4985-812e-892285e0bad0"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pdfApi/contract?contractId={{contractId}}&accessToken={{tokenOwner}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdfApi",
												"contract"
											],
											"query": [
												{
													"key": "contractId",
													"value": "{{contractId}}"
												},
												{
													"key": "accessToken",
													"value": "{{tokenOwner}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[15]Get contract_state=completed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let Result = responseData.results\r",
													"let rent_contract_completed;\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log( responseData.results)\r",
													"\r",
													"pm.test('rent contract completed is in the list', () => {\r",
													"    let rent_contract_completed = Result.find((contract) =>  contract.tracking_code === pm.collectionVariables.get('tracking_code'))\r",
													"    // pm.expect(properties).to.be.an('object')\r",
													"    // console.log(properties)\r",
													"    console.log(rent_contract_completed)\r",
													"\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.results[0]).to.have.property('id');\r",
													"    pm.expect(responseData.results[0]).to.have.property('creator_role');\r",
													"    pm.expect(responseData.results[0]).to.have.property('contract_role');\r",
													"     pm.expect(responseData.results[0]).to.have.property('created_date');\r",
													"     pm.expect(responseData.results[0]).to.have.property('contract_status');\r",
													"     pm.expect(responseData.results[0]).to.have.property('deadline');\r",
													"     pm.expect(responseData.results[0]).to.have.property('tracking_code');\r",
													"     pm.expect(responseData.results[0]).to.have.property('is_information_completed');\r",
													"     pm.expect(responseData.results[0]).to.have.property('is_contract_for_sale');\r",
													"     pm.expect(responseData.results[0]).to.have.property('customer');\r",
													"     pm.expect(responseData.results[0]).to.have.property('customer_company');\r",
													"     pm.expect(responseData.results[0]).to.have.property('customer_company_national_code');\r",
													"     pm.expect(responseData.results[0]).to.have.property('customer_phone_number');\r",
													"     pm.expect(responseData.results[0]).to.have.property('owners');\r",
													"     pm.expect(responseData.results[0]).to.have.property('owner_phone_number');\r",
													"     pm.expect(responseData.results[0]).to.have.property('owner_company_national_code');\r",
													"     pm.expect(responseData.results[0]).to.have.property('type_of_base_property');\r",
													"     pm.expect(responseData.results[0]).to.have.property('base_property');\r",
													"     pm.expect(responseData.results[0]).to.have.property('property');\r",
													"     pm.expect(responseData.results[0]).to.have.property('payments');\r",
													"     pm.expect(responseData.results[0]).to.have.property('signed_date');\r",
													"     pm.expect(responseData.results[0]).to.have.property('terminate_date');\r",
													"     pm.expect(responseData.results[0]).to.have.property('date_end');\r",
													"     pm.expect(responseData.results[0]).to.have.property('is_all_witness_completed_and_signed');\r",
													"     pm.expect(responseData.results[0]).to.have.property('owner_national_code');\r",
													"     pm.expect(responseData.results[0]).to.have.property('customer_national_code');\r",
													"     pm.expect(responseData.results[0]).to.have.property('terminate_minute');\r",
													" });\r",
													"\r",
													"\r",
													"pm.test(\"Validate the customer object properties\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.results[0].customer).to.be.an('object');\r",
													"    pm.expect(responseData.results[0].customer.sex).to.be.a('string');\r",
													"    pm.expect(responseData.results[0].customer.first_name).to.be.a('string');\r",
													"    pm.expect(responseData.results[0].customer.last_name).to.be.a('string');\r",
													"    pm.expect(responseData.results[0].customer.national_code).to.be.a('string');\r",
													"    pm.expect(responseData.results[0].customer.username).to.be.a('string');\r",
													"    pm.expect(responseData.results[0].customer.father_name).to.be.a('string');\r",
													"    pm.expect(responseData.results[0].customer.birth_date).to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the payments array\", function () {\r",
													"\r",
													"    pm.expect(responseData.results[0].payments).to.be.an('array').that.is.not.empty;\r",
													"    responseData.results[0].payments.forEach(function(payment) {\r",
													"        pm.expect(payment.rent_amount).to.be.a('number');\r",
													"        pm.expect(payment.payment_levels).to.be.an('array').that.is.not.empty;\r",
													"        payment.payment_levels.forEach(function(level) {\r",
													"            pm.expect(level.payment_date).to.be.a('string');\r",
													"            pm.expect(level.payment_amount).to.be.a('number');\r",
													"            pm.expect(level.payment_method).to.be.a('number');\r",
													"        });\r",
													"        pm.expect(payment.mortgage_or_sell_amount).to.be.a('number');\r",
													"        pm.expect(payment.rent_increase_percentage).to.be.a('number');\r",
													"        pm.expect(payment.mortgage_increase_percentage).to.be.a('number');\r",
													"    });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer e373200cf98502d16522f295b02991dd1e410b384c21c854866895c62684e1121fe1cdeb3d161109a41bc07f465225e51f30bf1dc091b534c9c449f2869b3349"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=5be1bb47-0df2-4822-9c6b-9c48b63d48fd&created=1719923277526&expire=1719924228062"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contractsList?role_type__not=adviser&ordering=-created_date&page=1&contract_state=completed&contract_type=rent"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/?page=1&contract_state=completed&role_type__not=adviser&ordering=-created_date&contract_type=rent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												""
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "contract_state",
													"value": "completed"
												},
												{
													"key": "role_type__not",
													"value": "adviser"
												},
												{
													"key": "ordering",
													"value": "-created_date"
												},
												{
													"key": "contract_type",
													"value": "rent"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tokenOwner}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "[Setup][16]Get Token Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.code==200){\r",
													"let requestData = pm.request.headers.get(\"authorization\")\r",
													"let authorization = requestData.split(\" \")\r",
													"let token = authorization[1]\r",
													"pm.collectionVariables.set('token',token)\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url:\"https://new.srem.ir/auth/sso/login/gov/1\",\r",
													"    method: \"GET\",\r",
													"},function(err,res){\r",
													"    if(err){\r",
													"        console.log(\"Request failled code : \" , err)\r",
													"    } else{\r",
													"        console.log(\"Response Status Code\" , res.status)\r",
													"        console.log(\"Response bode\" , res.json())\r",
													"        let tokenCustomer =res.json().token.token\r",
													"        console.log(res.json().token.token)\r",
													"        pm.collectionVariables.set('tokenCustomer',tokenCustomer)\r",
													"    }\r",
													"}\r",
													")\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 6beb343cf78bff554dfbaa747eb93baf9a58ffca1b17030f32f38deb37f21c5248760e68f9b1eae382c16ac452c63e8675edaedd1438488233bcffb099ffe7b3"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E93FFC0FBF750CBB5F2EBA6F8; _dd_s=logs=1&id=47d517a6-3de4-47e7-b5f3-c3d5ee6538e1&created=1719835051616&expire=1719835957310"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/profile"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me/complete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me",
												"complete"
											]
										}
									},
									"response": []
								},
								{
									"name": "[17] User information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body for value valid\" , () => {\r",
													"        const expectedObject = \r",
													"        {\r",
													"    \"address_postal_code\": \"1111111111\",\r",
													"    \"marriage\": \"M\",\r",
													"    \"address\": \"میدان ولیعصر (عج)\",\r",
													"    \"address_province\": \"تهران\",\r",
													"    \"address_county\": \"پرديس\"\r",
													"}\r",
													"\r",
													"                    pm.expect(responseData).to.deep.include(expectedObject);\r",
													"\r",
													"       })"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 9ad62336c16c33f14220f09138822c3ac369e41784b81328d508ca3e917b11f3abd3d43b5d5faa2e280b985889714ff839d304574501f01868ce144ce9fdcf87"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=c4e10d8e-7cce-4ae2-b925-d58213e29e91&created=1719908977582&expire=1719910667048"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/editContract/owner/6d379968-e1d4-4e22-b7de-3c0e3cc7f1e0"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address_postal_code\": \"1111111111\",\r\n    \"marriage\": \"M\",\r\n    \"address\": \"میدان ولیعصر (عج)\",\r\n    \"address_province\": \"تهران\",\r\n    \"address_county\": \"پرديس\",\r\n    \"id\": \"b4632580-377e-4d1c-8c09-b99a82ac47a6\",\r\n    \"username\": \"09030000002\",\r\n    \"first_name\": \"کاربر\",\r\n    \"last_name\": \"دوم\",\r\n    \"father_name\": \"پدر کاربر دوم\",\r\n    \"birth_date\": \"1992-01-01\",\r\n    \"sex\": \"F\",\r\n    \"national_code\": \"0050331264\",\r\n    \"goftino_id\": null,\r\n    \"is_adviser\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/customer/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"customer",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[18] Contract Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 92bc9e4d1318f38b76160ab348589aca6e45b19a6e935764f36598c9e476645a93ccae0ddf58d2a9589f701e7dbe292372c5375443b109ccb05b56fe82a35f60",
												"disabled": true
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E93FFC0FBF750CBB5F2EBA6F8; _dd_s=logs=1&id=fc2239ab-d43b-4dc2-94fd-ffc87f7f8179&created=1716711937860&expire=1716713062630"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/ed186ea9-84d6-4c9e-bfaa-7f9b126744d1"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/full/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"full",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[19] Send Otp For signature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let otp_code_Owner = responseData.otp_code\r",
													"\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('receiver');\r",
													"    pm.expect(responseData).to.haveOwnProperty('sender');\r",
													"    pm.expect(responseData).to.haveOwnProperty('next_try_seconds');\r",
													"    pm.expect(responseData).to.haveOwnProperty('otp_code');\r",
													"    pm.expect(responseData).to.haveOwnProperty('to_owner');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.receiver).to.be.an('string');\r",
													"    pm.expect(responseData.sender).to.be.an('string')\r",
													"    pm.expect(responseData.for_sign).to.be.an('boolean');\r",
													"    pm.expect(responseData.to_owner).to.be.an('boolean');\r",
													"    pm.expect(responseData.next_try_seconds).to.be.an('number');\r",
													"    pm.expect(responseData.otp_code).to.be.an('string');\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_Owner',otp_code_Owner)\r",
													"})\r",
													" }\r",
													" else if(pm.response.code === 400){\r",
													"\r",
													"     pm.test(\"Status code is 400\", function () {\r",
													"         pm.response.to.have.status(400);\r",
													"     });\r",
													"     pm.test('invalid value for {type_of_base_property}' , () => {\r",
													"    const expectedObject = \r",
													"    {\r",
													"    \"ResendTimeout\": \"Resend timeout is not expired.\",\r",
													"    \"message\": \"باید 2 دقیقه دیگر تا ارسال مجدد کد یکبار مصرف منتظر بمانید\"\r",
													"}\r",
													" })\r",
													" }"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenOwner}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 673ceff66c22812ef2eb4ae4c26ace82ccd8672d31bc6cc538d91ce4751ff866af92f915a65d49d782896539d32373742140907f391f84bc75917fdede7ab26d"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=40b69526-d618-4b24-a3fd-c87bbd7b2f31&created=1719913797549&expire=1719914754147"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/signature/otp/?for_sign=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"signature",
												"otp",
												""
											],
											"query": [
												{
													"key": "for_sign",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[20]Verify signature Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"checked response values \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.contract).to.eql(pm.collectionVariables.get(\"contractId\"));\r",
													"    pm.expect(jsonData.contract_status).to.eql(4)\r",
													"    pm.expect(jsonData.contract_role).to.eql(\"owner\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"}\r",
													"\r",
													"else if(pm.response.code==400){\r",
													"    pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"    pm.test(\"check Response values\", function () {\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.LifetimeTimeout).to.eql(\"Phone number not found.\");\r",
													"        pm.expect(jsonData.message).to.eql(\"مدت زمان ارسال کد یکبار مصرف به اتمام رسیده است.\");\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenOwner}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 673ceff66c22812ef2eb4ae4c26ace82ccd8672d31bc6cc538d91ce4751ff866af92f915a65d49d782896539d32373742140907f391f84bc75917fdede7ab26d"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=40b69526-d618-4b24-a3fd-c87bbd7b2f31&created=1719913797549&expire=1719915036787"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"otp_code\": \"{{otp_code_Owner}}\",\r\n    \"for_sign\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://new.srem.ir/api/contracts/{{contractId}}/signature/",
											"protocol": "https",
											"host": [
												"new",
												"srem",
												"ir"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"signature",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[21] Send otp For signature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let otp_code_customer = responseData.otp_code\r",
													"\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('receiver');\r",
													"    pm.expect(responseData).to.haveOwnProperty('sender');\r",
													"    pm.expect(responseData).to.haveOwnProperty('next_try_seconds');\r",
													"    pm.expect(responseData).to.haveOwnProperty('otp_code');\r",
													"    pm.expect(responseData).to.haveOwnProperty('to_owner');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.receiver).to.be.an('string');\r",
													"    pm.expect(responseData.sender).to.be.an('string')\r",
													"    pm.expect(responseData.for_sign).to.be.an('boolean');\r",
													"    pm.expect(responseData.to_owner).to.be.an('boolean');\r",
													"    pm.expect(responseData.next_try_seconds).to.be.an('number');\r",
													"    pm.expect(responseData.otp_code).to.be.an('string');\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_customer',otp_code_customer)\r",
													"})\r",
													" }\r",
													" else if(pm.response.code === 400){\r",
													"\r",
													"     pm.test(\"Status code is 400\", function () {\r",
													"         pm.response.to.have.status(400);\r",
													"     });\r",
													"     pm.test('invalid value for {type_of_base_property}' , () => {\r",
													"    const expectedObject = \r",
													"    {\r",
													"    \"ResendTimeout\": \"Resend timeout is not expired.\",\r",
													"    \"message\": \"باید 2 دقیقه دیگر تا ارسال مجدد کد یکبار مصرف منتظر بمانید\"\r",
													"}\r",
													" })\r",
													" }"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 9ad62336c16c33f14220f09138822c3ac369e41784b81328d508ca3e917b11f3abd3d43b5d5faa2e280b985889714ff839d304574501f01868ce144ce9fdcf87"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=3efbec15-724a-48fe-9e3a-887c574c7ec2&created=1719912356601&expire=1719913269886"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/signature/otp/?for_sign=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"signature",
												"otp",
												""
											],
											"query": [
												{
													"key": "for_sign",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[22]verify signature Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"checked response values \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.contract).to.eql(pm.collectionVariables.get(\"contractId\"));\r",
													"    pm.expect(jsonData.contract_status).to.eql(6)\r",
													"    pm.expect(jsonData.contract_role).to.eql(\"customer\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"}\r",
													"\r",
													"else if(pm.response.code==400){\r",
													"    pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"    pm.test(\"check Response values\", function () {\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.LifetimeTimeout).to.eql(\"Phone number not found.\");\r",
													"        pm.expect(jsonData.message).to.eql(\"مدت زمان ارسال کد یکبار مصرف به اتمام رسیده است.\");\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 9ad62336c16c33f14220f09138822c3ac369e41784b81328d508ca3e917b11f3abd3d43b5d5faa2e280b985889714ff839d304574501f01868ce144ce9fdcf87"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=3efbec15-724a-48fe-9e3a-887c574c7ec2&created=1719912356601&expire=1719914518296"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"otp_code\": \"{{otp_code_customer}}\",\r\n    \"for_sign\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/signature/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"signature",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[23]Send otp for signature witness_owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let otp_code_owner_witness = responseData.otp_code\r",
													"\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('id');\r",
													"    pm.expect(responseData).to.haveOwnProperty('contract');\r",
													"    pm.expect(responseData).to.haveOwnProperty('contract_status');\r",
													"    pm.expect(responseData).to.haveOwnProperty('created_date');\r",
													"    pm.expect(responseData).to.haveOwnProperty('is_owner_witness');\r",
													"    pm.expect(responseData).to.haveOwnProperty('national_code');\r",
													"    pm.expect(responseData).to.haveOwnProperty('phone_number');\r",
													"    pm.expect(responseData).to.haveOwnProperty('signature');\r",
													"    pm.expect(responseData).to.haveOwnProperty('signed_at');\r",
													"    pm.expect(responseData).to.haveOwnProperty('user');\r",
													"    pm.expect(responseData).to.haveOwnProperty('completed_date');\r",
													"    pm.expect(responseData).to.haveOwnProperty('signed_date');\r",
													"    pm.expect(responseData).to.haveOwnProperty('tracking_code');\r",
													"    pm.expect(responseData).to.haveOwnProperty('is_user_verified');\r",
													"\r",
													"\r",
													"\r",
													"    pm.expect(responseData.id).to.be.an('string');\r",
													"    pm.expect(responseData.contract).to.be.an('string')\r",
													"    pm.expect(responseData.contract_status).to.be.an('number');\r",
													"    pm.expect(responseData.created_date).to.be.an('string');\r",
													"    pm.expect(responseData.is_owner_witness).to.be.an('boolean');\r",
													"    pm.expect(responseData.national_code).to.be.an('string');\r",
													"    pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    pm.expect(responseData.signature).to.be.an('null');\r",
													"    pm.expect(responseData.signed_at).to.be.an('null');\r",
													"    pm.expect(responseData.user).to.be.an('null');\r",
													"    pm.expect(responseData.completed_date).to.be.an('null');\r",
													"    pm.expect(responseData.signed_date).to.be.an('string');\r",
													"    pm.expect(responseData.tracking_code).to.be.an('null');\r",
													"    pm.expect(responseData.is_user_verified).to.be.an('boolean');\r",
													"\r",
													"    pm.test(\"Your test name\", function () {\r",
													"        pm.expect(responseData.contract_status).to.eql(10);\r",
													"        pm.expect(responseData.is_owner_witness).to.eql(true);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_owner_witness',otp_code_owner_witness)\r",
													"})\r",
													" }\r",
													" else if(pm.response.code === 400){\r",
													"\r",
													"     pm.test(\"Status code is 400\", function () {\r",
													"         pm.response.to.have.status(400);\r",
													"     });\r",
													"     pm.test('invalid value for {type_of_base_property}' , () => {\r",
													"    const expectedObject = \r",
													"    {\r",
													"    \"ResendTimeout\": \"Resend timeout is not expired.\",\r",
													"    \"message\": \"باید 2 دقیقه دیگر تا ارسال مجدد کد یکبار مصرف منتظر بمانید\"\r",
													"}\r",
													" })\r",
													" }"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenOwner}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 673ceff66c22812ef2eb4ae4c26ace82ccd8672d31bc6cc538d91ce4751ff866af92f915a65d49d782896539d32373742140907f391f84bc75917fdede7ab26d"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=40b69526-d618-4b24-a3fd-c87bbd7b2f31&created=1719913797549&expire=1719916343029"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone_number\": \"+989030000004\",\r\n    \"national_code\": \"2754261737\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/witness/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"witness",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[24]Send otp for signature witness_customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let otp_code_customer_witness = responseData.otp_code\r",
													"\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('id');\r",
													"    pm.expect(responseData).to.haveOwnProperty('contract');\r",
													"    pm.expect(responseData).to.haveOwnProperty('contract_status');\r",
													"    pm.expect(responseData).to.haveOwnProperty('created_date');\r",
													"    pm.expect(responseData).to.haveOwnProperty('is_owner_witness');\r",
													"    pm.expect(responseData).to.haveOwnProperty('national_code');\r",
													"    pm.expect(responseData).to.haveOwnProperty('phone_number');\r",
													"    pm.expect(responseData).to.haveOwnProperty('signature');\r",
													"    pm.expect(responseData).to.haveOwnProperty('signed_at');\r",
													"    pm.expect(responseData).to.haveOwnProperty('user');\r",
													"    pm.expect(responseData).to.haveOwnProperty('completed_date');\r",
													"    pm.expect(responseData).to.haveOwnProperty('signed_date');\r",
													"    pm.expect(responseData).to.haveOwnProperty('is_owner_witness');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.id).to.be.an('string');\r",
													"    pm.expect(responseData.contract).to.be.an('string')\r",
													"    pm.expect(responseData.contract_status).to.be.an('number');\r",
													"    pm.expect(responseData.is_owner_witness).to.be.an('boolean');\r",
													"    pm.expect(responseData.national_code).to.be.an('string');\r",
													"    pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    // pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    // pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    // pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    // pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    // pm.expect(responseData.phone_number).to.be.an('string');\r",
													"\r",
													"})\r",
													" }\r",
													" else if(pm.response.code === 400){\r",
													"\r",
													"     pm.test(\"Status code is 400\", function () {\r",
													"         pm.response.to.have.status(400);\r",
													"     });\r",
													"     pm.test('invalid value for {type_of_base_property}' , () => {\r",
													"    const expectedObject = \r",
													"    {\r",
													"    \"message\": \"کدملی وارد شده تکراری است و به عنوان شاهد ثبت شده است.\"\r",
													"}\r",
													" })\r",
													" }"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenCustomer}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 673ceff66c22812ef2eb4ae4c26ace82ccd8672d31bc6cc538d91ce4751ff866af92f915a65d49d782896539d32373742140907f391f84bc75917fdede7ab26d"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=40b69526-d618-4b24-a3fd-c87bbd7b2f31&created=1719913797549&expire=1719916343029"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone_number\": \"+989030000005\",\r\n    \"national_code\": \"6039350822\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/witness/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"witness",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tokenCustomer}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "owner'S  witness",
							"item": [
								{
									"name": "[Setup][25]Get Token Owner Withness",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.code==200){\r",
													"let requestData = pm.request.headers.get(\"authorization\")\r",
													"let authorization = requestData.split(\" \")\r",
													"let token = authorization[1]\r",
													"pm.collectionVariables.set('token',token)\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url:\"https://new.srem.ir/auth/sso/login/gov/4\",\r",
													"    method: \"GET\",\r",
													"},function(err,res){\r",
													"    if(err){\r",
													"        console.log(\"Request failled code : \" , err)\r",
													"    } else{\r",
													"        console.log(\"Response Status Code\" , res.status)\r",
													"        console.log(\"Response bode\" , res.json())\r",
													"        let tokenWitnessOwner =res.json().token.token\r",
													"        console.log(res.json().token.token)\r",
													"        pm.collectionVariables.set('tokenWitnessOwner',tokenWitnessOwner)\r",
													"    }\r",
													"}\r",
													")\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 6beb343cf78bff554dfbaa747eb93baf9a58ffca1b17030f32f38deb37f21c5248760e68f9b1eae382c16ac452c63e8675edaedd1438488233bcffb099ffe7b3"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E93FFC0FBF750CBB5F2EBA6F8; _dd_s=logs=1&id=47d517a6-3de4-47e7-b5f3-c3d5ee6538e1&created=1719835051616&expire=1719835957310"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/profile"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me/complete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me",
												"complete"
											]
										}
									},
									"response": []
								},
								{
									"name": "[26]Sent Otp for signature Witness Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"let otp_code_signature_witness_owner  = responseData.otp_code\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"\r",
													"if(pm.response.code===400)\r",
													" {\r",
													"    pm.test(' wait for time otp after 2 minute', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('ResendTimeout');\r",
													"    pm.expect(responseData).to.haveOwnProperty('message');\r",
													"\r",
													"    pm.expect(responseData.ResendTimeout).to.be.an('string');\r",
													"    pm.expect(responseData.message).to.be.an('string');\r",
													"\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" }\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('phone_number');\r",
													"    pm.expect(responseData).to.haveOwnProperty('next_try_seconds');\r",
													"    pm.expect(responseData).to.haveOwnProperty('otp_code');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    pm.expect(responseData.next_try_seconds).to.be.an('number')\r",
													"    pm.expect(responseData.otp_code).to.be.an('string');\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_signature_witness_owner',otp_code_signature_witness_owner)\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													" }\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer d34437c942fe4c28318be48afa8bbc1f2d6b2aabda7e2113b9e601f4640fc6c2a1284ab65c2633c09a7b70372bd02b757c6c6dbb95bb22fd50980213798c6228"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=3efbec15-724a-48fe-9e3a-887c574c7ec2&created=1719912356601&expire=1719919783717"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/witness/2754261737/signature/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"witness",
												"2754261737",
												"signature",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[27]Verify signature Owner Witness",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"checked values response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.signature).to.eql(true);\r",
													"    pm.expect(jsonData.contract_status).to.eql(10);\r",
													"    pm.expect(jsonData.is_owner_witness).to.eql(true);\r",
													"    pm.expect(jsonData.signature).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer d34437c942fe4c28318be48afa8bbc1f2d6b2aabda7e2113b9e601f4640fc6c2a1284ab65c2633c09a7b70372bd02b757c6c6dbb95bb22fd50980213798c6228"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=3efbec15-724a-48fe-9e3a-887c574c7ec2&created=1719912356601&expire=1719919855405"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"otp_code\": \"{{otp_code_signature_witness_owner}}\",\r\n    \"signature\": true\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/witness/2754261737/signature/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"witness",
												"2754261737",
												"signature",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tokenWitnessOwner}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "customer 'S  witness",
							"item": [
								{
									"name": "[Setup][28]Get Token Customer Witness",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.code==200){\r",
													"let requestData = pm.request.headers.get(\"authorization\")\r",
													"let authorization = requestData.split(\" \")\r",
													"let tokenWitnessCustomer = authorization[1]\r",
													"pm.collectionVariables.set('tokenWitnessCustomer',tokenWitnessCustomer)\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url:\"https://new.srem.ir/auth/sso/login/gov/5\",\r",
													"    method: \"GET\",\r",
													"},function(err,res){\r",
													"    if(err){\r",
													"        console.log(\"Request failled code : \" , err)\r",
													"    } else{\r",
													"        console.log(\"Response Status Code\" , res.status)\r",
													"        console.log(\"Response bode\" , res.json())\r",
													"        let tokenWitnessCustomer =res.json().token.token\r",
													"        console.log(res.json().token.token)\r",
													"        pm.collectionVariables.set('tokenWitnessCustomer',tokenWitnessCustomer)\r",
													"    }\r",
													"}\r",
													")\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 6beb343cf78bff554dfbaa747eb93baf9a58ffca1b17030f32f38deb37f21c5248760e68f9b1eae382c16ac452c63e8675edaedd1438488233bcffb099ffe7b3"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E93FFC0FBF750CBB5F2EBA6F8; _dd_s=logs=1&id=47d517a6-3de4-47e7-b5f3-c3d5ee6538e1&created=1719835051616&expire=1719835957310"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/profile"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/me/complete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												"me",
												"complete"
											]
										}
									},
									"response": []
								},
								{
									"name": "[29]Sent Otp for signature Witness Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"let otp_code_signature_witness_Customer  = responseData.otp_code\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"\r",
													"if(pm.response.code===400)\r",
													" {\r",
													"    pm.test(' wait for time otp after 2 minute', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('ResendTimeout');\r",
													"    pm.expect(responseData).to.haveOwnProperty('message');\r",
													"\r",
													"    pm.expect(responseData.ResendTimeout).to.be.an('string');\r",
													"    pm.expect(responseData.message).to.be.an('string');\r",
													"\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" }\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('phone_number');\r",
													"    pm.expect(responseData).to.haveOwnProperty('next_try_seconds');\r",
													"    pm.expect(responseData).to.haveOwnProperty('otp_code');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    pm.expect(responseData.next_try_seconds).to.be.an('number')\r",
													"    pm.expect(responseData.otp_code).to.be.an('string');\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_signature_witness_Customer',otp_code_signature_witness_Customer)\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													" }\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer d34437c942fe4c28318be48afa8bbc1f2d6b2aabda7e2113b9e601f4640fc6c2a1284ab65c2633c09a7b70372bd02b757c6c6dbb95bb22fd50980213798c6228"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=3efbec15-724a-48fe-9e3a-887c574c7ec2&created=1719912356601&expire=1719919783717"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/witness/6039350822/signature/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"witness",
												"6039350822",
												"signature",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[30]Verify signature Customer Witness",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let test = function()  {\r",
													"postman.setNextRequest(\"[14]Get contracts full\");\r",
													"}\r",
													"setTimeout(test,720000)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer d34437c942fe4c28318be48afa8bbc1f2d6b2aabda7e2113b9e601f4640fc6c2a1284ab65c2633c09a7b70372bd02b757c6c6dbb95bb22fd50980213798c6228"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=3efbec15-724a-48fe-9e3a-887c574c7ec2&created=1719912356601&expire=1719919855405"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/77c2d3ed-fe5d-4099-82ca-dfeb01a8dd70"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"otp_code\": \"{{otp_code_signature_witness_Customer}}\",\r\n    \"signature\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/witness/6039350822/signature/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"witness",
												"6039350822",
												"signature",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tokenWitnessCustomer}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Inquiry Trackingcode",
							"item": [
								{
									"name": "[31]Get contracts full",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let tracking_code = responseData.tracking_code\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if(responseData.contract_status === 12 ){\r",
													"    pm.collectionVariables.set(\"tracking_code\",tracking_code)\r",
													"}\r",
													"postman.setNextRequest(\"[32] inquiry tracking_code by Owner\");\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 673fc79a7476e092baeaf26222324666e41785c6a39bcde1bef1bd778fb76ddc6fc445f84fb914501a37233fa26739b6da0993c74ed6151f18785e4cac076520"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=5be1bb47-0df2-4822-9c6b-9c48b63d48fd&created=1719923277526&expire=1719925274136"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/74859f58-1f35-43ea-89cb-40d68fa15b3f"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/full/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"full",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[32] inquiry tracking_code by Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													" pm.test(\"check values of response body\", function () {\r",
													"         \r",
													"         pm.expect(responseData.phone_number).to.eql(\"+989030000001\");\r",
													"         pm.expect(responseData.status).to.eql(13);\r",
													"         pm.expect(responseData.is_contract_for_sale).to.eql(false);\r",
													"         \r",
													"     });\r",
													"\r",
													"     pm.test('Response has  valid contracts', () =>{\r",
													"    // console.log(response[0].contract)\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.amlak).to.be.an('object');\r",
													"\r",
													"     pm.expect(responseData).to.haveOwnProperty('id');\r",
													"     pm.expect(responseData).to.haveOwnProperty('phone_number');\r",
													"     pm.expect(responseData).to.haveOwnProperty('status');\r",
													"     pm.expect(responseData).to.haveOwnProperty('is_contract_for_sale');\r",
													"     pm.expect(responseData.amlak).to.haveOwnProperty('is_active');\r",
													"     pm.expect(responseData.amlak).to.haveOwnProperty('reason');\r",
													"    \r",
													"    pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    pm.expect(responseData.id).to.be.an('string');\r",
													"    pm.expect(responseData.status).to.be.an('number');\r",
													"    pm.expect(responseData.is_contract_for_sale).to.be.an('boolean');\r",
													"    pm.expect(responseData.amlak.is_active).to.be.an('boolean');\r",
													"   pm.expect(responseData.amlak.reason).to.be.an('number');\r",
													"    \r",
													"\r",
													"\r",
													" })\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=c7181124-a389-449b-94d5-b3f4e4f111fb&created=1719984223505&expire=1719985331086"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/inquiry"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"tracking_code\": \"{{tracking_code}}\",\r\n    \"national_code\": \"4689121672\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/tracking_code/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"tracking_code",
												""
											]
										}
									},
									"response": []
								}
							],
							"description": "استعلام کد رهگیری قرارداد اجاره توسط طرفین قرارداد و شاهدین",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tokenOwner}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "terminate",
							"item": [
								{
									"name": "[33]Termination of Contract إBy Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check values response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(responseData[2].is_active).to.eql(false);\r",
													"    pm.expect(responseData[2].is_appended).to.eql(true);\r",
													"    pm.expect(responseData[2].order).to.eql(3);\r",
													"    pm.expect(responseData[2].text).to.eql(\"افزودن  بند فسخ قرارداد\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer c4bc5c83eb946e5bad73efcfb2c604b3caee2407ded0f669d49fce0e0869cac2fcdc444ea005747ceace39afb07699699d618c0253a7b3fb0097db6713548650"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=48d03727-3267-4746-9f5d-61aff50023f6&created=1719997308152&expire=1719999048617"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/terminate/acf0e55d-a9da-4d5b-b3c6-287c9393fcd9"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"order\": 1,\r\n        \"text\": \"هر دو طرف متعهد می‌شوند که در فرآیند فسخ این قرارداد، با همکاری و هماهنگی لازم، تمام مراحل مورد نیاز را پیگیری کرده و اطمینان حاصل کنند که تمامی مفاد و شرایط فسخ به درستی اجرا شده است.\",\r\n        \"is_active\": false,\r\n        \"is_appended\": true,\r\n        \"paragraph_number\": 1\r\n    },\r\n    {\r\n        \"order\": 2,\r\n        \"text\": \"هر دو طرف تأکید می‌کنند که در فرآیند فسخ، حقوق و منافع طرف مقابل را رعایت کرده و از هرگونه تضییع یا تخلف در اجرای این فرآیند پرهیز می‌نمایند.\",\r\n        \"is_active\": false,\r\n        \"is_appended\": true,\r\n        \"paragraph_number\": 1\r\n    },\r\n    {\r\n        \"paragraph_number\": 1,\r\n        \"order\": 3,\r\n        \"text\": \"افزودن  بند فسخ قرارداد\",\r\n        \"is_active\": false,\r\n        \"is_appended\": true\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/terminate/minute/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"terminate",
												"minute",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[34]Send otp For terminate By Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"let otp_code_terminate_owner  = responseData.otp_code\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"\r",
													"if(pm.response.code===400)\r",
													" {\r",
													"    pm.test(' check validation response', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('ResendTimeout');\r",
													"    pm.expect(responseData).to.haveOwnProperty('message');\r",
													"\r",
													"    pm.expect(responseData.ResendTimeout).to.be.an('string');\r",
													"    pm.expect(responseData.message).to.be.an('string');\r",
													"    pm.expect(responseData.ResendTimeout).to.eql(\"Resend timeout is not expired.\");\r",
													"    pm.expect(responseData.message).to.eql(\"باید 2 دقیقه دیگر تا ارسال مجدد کد یکبار مصرف منتظر بمانید\");\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" }\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('next_try_seconds');\r",
													"    pm.expect(responseData).to.haveOwnProperty('otp_code');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.next_try_seconds).to.be.an('number');\r",
													"    pm.expect(responseData.otp_code).to.be.an('string')\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_terminate_owner',otp_code_terminate_owner)\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													" }\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenOwner}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer c4bc5c83eb946e5bad73efcfb2c604b3caee2407ded0f669d49fce0e0869cac2fcdc444ea005747ceace39afb07699699d618c0253a7b3fb0097db6713548650"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=48d03727-3267-4746-9f5d-61aff50023f6&created=1719997308152&expire=1719999075920"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/acf0e55d-a9da-4d5b-b3c6-287c9393fcd9"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/terminate/otp/?for_terminate=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"terminate",
												"otp",
												""
											],
											"query": [
												{
													"key": "for_terminate",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[35]Verify Otp  for terminate By Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"checked response values \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.contract).to.eql(pm.collectionVariables.get(\"contractId\"));\r",
													"    pm.expect(jsonData.contract_status).to.eql(12)\r",
													"    pm.expect(jsonData.contract_role).to.eql(\"owner\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"}\r",
													"\r",
													"else if(pm.response.code==403){\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"    pm.test(\"check Response values\", function () {\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.ContractIsNotReadyForTerminate).to.eql(\"This contract doesnt have tracking code.\");\r",
													"        pm.expect(jsonData.message).to.eql(\"این قرارداد به دلیل نداشتن کدرهگیری قابل فسخ نیست.\");\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenOwner}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer c4bc5c83eb946e5bad73efcfb2c604b3caee2407ded0f669d49fce0e0869cac2fcdc444ea005747ceace39afb07699699d618c0253a7b3fb0097db6713548650"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=48d03727-3267-4746-9f5d-61aff50023f6&created=1719997308152&expire=1720001384248"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/acf0e55d-a9da-4d5b-b3c6-287c9393fcd9"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"otp_code\": \"{{otp_code_terminate_owner}}\",\r\n    \"for_owner\": true,\r\n    \"for_terminate\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/terminate/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"terminate",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[36]Send otp For terminate By Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"let otp_code_terminate_customer  = responseData.otp_code\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"\r",
													"if(pm.response.code===400)\r",
													" {\r",
													"    pm.test(' check validation response', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('ResendTimeout');\r",
													"    pm.expect(responseData).to.haveOwnProperty('message');\r",
													"\r",
													"    pm.expect(responseData.ResendTimeout).to.be.an('string');\r",
													"    pm.expect(responseData.message).to.be.an('string');\r",
													"    pm.expect(responseData.ResendTimeout).to.eql(\"Resend timeout is not expired.\");\r",
													"    pm.expect(responseData.message).to.eql(\"باید 2 دقیقه دیگر تا ارسال مجدد کد یکبار مصرف منتظر بمانید\");\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" }\r",
													" if(pm.response.code === 200){\r",
													"pm.test('Response has  valid contracts', () =>{\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.haveOwnProperty('next_try_seconds');\r",
													"    pm.expect(responseData).to.haveOwnProperty('otp_code');\r",
													"\r",
													"\r",
													"    pm.expect(responseData.next_try_seconds).to.be.an('number');\r",
													"    pm.expect(responseData.otp_code).to.be.an('string')\r",
													"\r",
													"    pm.collectionVariables.set('otp_code_terminate_customer',otp_code_terminate_customer)\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													" }\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenCustomer}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer cc931b5538901d7d79ab9ec6f51357494dbad5fabc6ea6eb97f2ef7f8d244e0e86a9e8beca2b73d2bb09e422385148f1488dc9cd12a241fc9baab7f1ac7ea1ac"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=05f00d9a-de5f-40e4-9d89-28db76095f11&created=1720000818276&expire=1720002323187"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/acf0e55d-a9da-4d5b-b3c6-287c9393fcd9"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/terminate/otp/?for_terminate=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"terminate",
												"otp",
												""
											],
											"query": [
												{
													"key": "for_terminate",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[37]Verify Otp  for terminate By Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"checked response values \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.contract).to.eql(pm.collectionVariables.get(\"contractId\"));\r",
													"    pm.expect(jsonData.contract_status).to.eql(13)\r",
													"    pm.expect(jsonData.contract_role).to.eql(\"customer\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"}\r",
													"\r",
													"else if(pm.response.code==403){\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"    pm.test(\"check Response values\", function () {\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.ContractIsNotReadyForTerminate).to.eql(\"This contract doesnt have tracking code.\");\r",
													"        pm.expect(jsonData.message).to.eql(\"این قرارداد به دلیل نداشتن کدرهگیری قابل فسخ نیست.\");\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenCustomer}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer cc931b5538901d7d79ab9ec6f51357494dbad5fabc6ea6eb97f2ef7f8d244e0e86a9e8beca2b73d2bb09e422385148f1488dc9cd12a241fc9baab7f1ac7ea1ac"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298EA9A302B92CDC63B921E6CE79; _dd_s=logs=1&id=05f00d9a-de5f-40e4-9d89-28db76095f11&created=1720000818276&expire=1720002598140"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/acf0e55d-a9da-4d5b-b3c6-287c9393fcd9"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"otp_code\": \"{{otp_code_terminate_customer}}\",\r\n    \"for_owner\": false,\r\n    \"for_terminate\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/terminate/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"terminate",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[38]Get Contract full",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseData = pm.response.json()\r",
													"let tracking_code_terminate = responseData.tracking_code\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if(responseData.contract_status === 13 ){\r",
													"    pm.collectionVariables.set(\"tracking_code_terminate\",tracking_code_terminate)\r",
													"}\r",
													"//postman.setNextRequest(\"[1] inquiry tracking_code by Owner\");\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer 6eeac081e9f217a8868b5fcc6221b73692edacd4851a069123356040004a29af1844553822e5281cca17ca42c8355e06e2058aaf2344b0e0d95362cd3fc16863"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=32afa9fd-5a12-4ac2-9123-792c144fbdea&created=1720002804783&expire=1720006793293"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/contract/ec8606c6-fa8d-40ea-b5a5-90594f4088b8"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/contracts/{{contractId}}/full/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"{{contractId}}",
												"full",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[39] inquiry Terminate  tracking_code by Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													" pm.test(\"check values of response body\", function () {\r",
													"         \r",
													"         pm.expect(responseData.phone_number).to.eql(\"+989030000001\");\r",
													"         pm.expect(responseData.status).to.eql(13);\r",
													"         pm.expect(responseData.is_contract_for_sale).to.eql(false);\r",
													"         \r",
													"     });\r",
													"\r",
													"     pm.test('Response has  valid contracts', () =>{\r",
													"    // console.log(response[0].contract)\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.amlak).to.be.an('object');\r",
													"\r",
													"     pm.expect(responseData).to.haveOwnProperty('id');\r",
													"     pm.expect(responseData).to.haveOwnProperty('phone_number');\r",
													"     pm.expect(responseData).to.haveOwnProperty('status');\r",
													"     pm.expect(responseData).to.haveOwnProperty('is_contract_for_sale');\r",
													"     pm.expect(responseData.amlak).to.haveOwnProperty('is_active');\r",
													"     pm.expect(responseData.amlak).to.haveOwnProperty('reason');\r",
													"    \r",
													"    pm.expect(responseData.phone_number).to.be.an('string');\r",
													"    pm.expect(responseData.id).to.be.an('string');\r",
													"    pm.expect(responseData.status).to.be.an('number');\r",
													"    pm.expect(responseData.is_contract_for_sale).to.be.an('boolean');\r",
													"    pm.expect(responseData.amlak.is_active).to.be.an('boolean');\r",
													"   pm.expect(responseData.amlak.reason).to.be.an('number');\r",
													"    \r",
													"\r",
													"\r",
													" })\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "cookie",
												"value": "cookiesession1=678B298E73A3723E2BEED4DD80D2760C; _dd_s=logs=1&id=c7181124-a389-449b-94d5-b3f4e4f111fb&created=1719984223505&expire=1719985331086"
											},
											{
												"key": "origin",
												"value": "https://new.srem.ir"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://new.srem.ir/inquiry"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"Windows\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-origin"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"tracking_code\": \"{{tracking_code_terminate}}\",\r\n    \"national_code\": \"5449375591\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/contracts/tracking_code/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"contracts",
												"tracking_code",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "سناریو تست :  \nاطلاعات مربوط به موجر و مستاجر به درستی ثبت میشود.  \nاین سناریو تا مرحله امضای موجر است.",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 200ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "",
			"type": "string"
		},
		{
			"key": "type_of_base_property",
			"value": ""
		},
		{
			"key": "melkId",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://new.srem.ir",
			"type": "string"
		},
		{
			"key": "base_property_usage_type",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "contractId",
			"value": ""
		},
		{
			"key": "base_property_usage_type",
			"value": ""
		},
		{
			"key": "propertyID",
			"value": ""
		},
		{
			"key": "propertyId",
			"value": ""
		},
		{
			"key": "propertiesId",
			"value": ""
		},
		{
			"key": "propertiesResIsresidentialId",
			"value": ""
		},
		{
			"key": "tokenCustomer",
			"value": ""
		},
		{
			"key": "tokenOwner",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "otp_code_customer",
			"value": ""
		},
		{
			"key": "otp_code_Owner",
			"value": ""
		},
		{
			"key": "tokenWitnessCustomer",
			"value": ""
		},
		{
			"key": "tokenWitnessOwner",
			"value": ""
		},
		{
			"key": "otp_code_signature_witness1",
			"value": ""
		},
		{
			"key": "otp_code_signature_witness_owner",
			"value": ""
		},
		{
			"key": "otp_code_signature_witness_Customer",
			"value": ""
		},
		{
			"value": ""
		},
		{
			"key": "tracking_code",
			"value": ""
		},
		{
			"key": "national_code_Owner",
			"value": ""
		},
		{
			"key": "otp_code_terminate_owner",
			"value": ""
		},
		{
			"key": "otp_code_terminate_customer",
			"value": ""
		},
		{
			"key": "otp_code_owner_witness",
			"value": ""
		},
		{
			"key": "tracking_code_terminate",
			"value": ""
		},
		{
			"key": "dateStart",
			"value": ""
		},
		{
			"key": "dateEnd",
			"value": ""
		},
		{
			"key": "registration_date",
			"value": ""
		},
		{
			"key": "postalCode",
			"value": ""
		}
	]
}